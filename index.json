[{"categories":["Web"],"content":"Hugo博客迁移部署2.0 ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:0:0","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["Web"],"content":"问题描述 因为学习环境变化，更换了电脑，所以想把之前部署好的博客迁移到新电脑上，折腾了半天，在此记录一下，以免之后有同样的需求。 ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:1:0","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["Web"],"content":"步骤 ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:2:0","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["Web"],"content":"1. 环境配置 git环境配置 hugo环境配置 下载 Hugo的安装也很简单，只需要去Hugo官网下载适合你电脑的安装包，直接解压到你想安装的路径，最后将该路径添加到PATH环境变量即可。建议一步到位，直接安装hugo_extended版本，因为LoveIt主题中有一些Features的实现只有extended版本的Hugo支持。我使用的是Win10系统64bit版本，因此选择hugo_extended_0.79.1_Windows-64bit.zip即可。其它系统的安装详见Hugo官网介绍，文档都很详细。 环境变量 系统变量(System variables)中的PATH，点击编辑。点击新建(New)，将Hugo解压的地址添加到环境变量，点击OK即可。 ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:2:1","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["Web"],"content":"2. 文件处理 文件拷贝：将之前的博客所有文件复制到新电脑环境下 文件清理：将旧博客文件夹里面的git环境删除干净 文件替换和修改 如果需要更换博客主题，以CodeIt主题为例 下载CodeIt主题（注意是在myblog路径下面进行） git init git submodule add https://github.com/sunt-programator/CodeIT.git themes/CodeIt 文件替换，替换配置文件。首先进入myblog\\themes\\CodeIT\\exampleSite目录下，复制config.toml文件，将其粘贴至myblog下以替换原有的config.toml文件，使用文本编辑器打开myblog目录下的config.toml文件，修改baseURL，themeDir以及enableGitinfo三行内容如下： baseURL = \"https://example.com\" ## 修改为你的github.io地址，格式为：https://yourusername.github.io #themesDir = \"../..\" ## 注释掉该行 enableGitInfo = false ## 由true改为false ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:2:2","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["Web"],"content":"3. 设置github git设置 重新在git设置一下身份的名字和邮箱（最好跟之前的电脑一致） git config --global user.name \"yourname\" git config --global user.email \"your@email.com\" 删除.ssh文件夹（直接搜索该文件夹）下所有文件(手动删除即可，不需要git）()，该文件在C盘用户目录下 git输入命令生成密匙（一直回车即可） ssh-keygen -t rsa -C \"your@email.com\"（请填你设置的邮箱地址） 打开https://github.com/，登陆你的账户，进入Settings–\u003eSSH and GPG keys–\u003eNew SSH key，将C盘用户目录下.ssh文件夹中的id_rsa.pub中内容复制到**“New SSH key”**中 删除github原来的repository 新建一个repository，设置github page。“Settings”–\u003e“Pages”–\u003e“master”–\u003e“docs” ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:2:3","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["Web"],"content":"4. 将博客内容上传至Github 编译hugo 该命令用于编译网站的内容，同时生成public文件夹，里面保存了静态网页所需要的所有内容，我们需要把public上传至我们第一步创建的Github仓库中，通过github.io发布博客。 推送 进入目录 cd public 初始化 git init 删除本地指定的远程地址 git remote rm origin 填写自己的域名 git remote add origin git@github.com:gao929165733/gao929165733.github.io 添加当前目录下的所有文件到暂存区 git add . 初将暂存区内容添加到本地仓库中 git commit -m \"hugo\" 将本地的master分支推送到origin主机的master分支 git push -u origin master ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:2:4","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["Web"],"content":"参考 Hugo博客部署到GitHub无法显示CSS、JS踩坑 Hugo博客从本地托管到github 基于Hugo + Github Pages + Netlify搭建LoveIt主题个人博客 加油吧，骚年！ ","date":"2023-03-14","objectID":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/:3:0","tags":["github hugo"],"title":"Hugo博客从一台电脑迁移到另外一台电脑（windows系统）","uri":"/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB2.0windows%E7%B3%BB%E7%BB%9F/"},{"categories":["环境软件配置"],"content":"Ubuntu_server显卡驱动自动更新解决 ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:0:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"1. 问题描述 系统更新了内核，导致之前配置好的显卡驱动更新，无法使用显卡，具体表现为： nvidia-smi命令报错：“NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.” ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:1:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"2. 具体步骤 ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:2:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"2.1 检查当前驱动的版本 查看已安装驱动的版本信息：ls /usr/src | grep nvidia 无任何返回内容，则说明需要重新安装驱动；直接按照2.2往下依次进行，先卸载之前驱动的文件，再安装新的驱动。 返回了驱动的版本信息，直接按照2.4往下进行。 nvcc -V 检查显卡驱动信息，是否适配cuda版本 ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:2:1","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"2.2 卸载原有的驱动 sudo apt-get --purge remove nvidia* sudo apt autoremove To remove CUDA Toolkit: sudo apt-get --purge remove \"*cublas*\" \"cuda*\" To remove NVIDIA Drivers: sudo apt-get --purge remove \"*nvidia*\" ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:2:2","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"2.3 安装新的驱动 更新apt-get：sudo apt update 查看更新后可以安装的显卡驱动版本，不一定要选择系统推荐的版本：ubuntu-drivers devices 安装列表给出的显卡驱动版本：sudo apt-get install nvidia-xxx 禁用nouveau （非必要，如果要禁用应该在安装之前禁用） 验证是否禁用 nouveau：lsmod | grep nouveau 若有输出，说明没有禁用，进行以下操作禁用：sudo gedit /etc/modprobe.d/blacklist.conf 在文件末尾中添加两条： blacklist nouveau options nouveau modeset=0 更新配置：sudo update-initramfs -u 重启电脑 查看是否禁用 nouveau，若无输出，则已禁用：lsmod | grep nouveau ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:2:3","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"2.4 重装（关键） sudo apt install dkms sudo dkms install -m nvidia -v xxx 注意：xxx是指2.1部分返回的驱动版本 ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:2:4","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"参考链接 无法连接NVIDIA驱动：NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver Ubuntu Nvidia-smi has failed 无法通信问题解决 ","date":"2023-03-14","objectID":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/:3:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server显卡驱动自动更新解决","uri":"/ubuntu%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%A7%A3%E5%86%B3/"},{"categories":["环境软件配置"],"content":"Ubuntu server深度学习工作站环境搭建 ","date":"2022-04-05","objectID":"/ubuntu_server/:0:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server","uri":"/ubuntu_server/"},{"categories":["环境软件配置"],"content":"1. 环境配置 ubuntu server 20.04 cuda 11.4 torch 1.9 miniconda-py3.7 ","date":"2022-04-05","objectID":"/ubuntu_server/:1:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server","uri":"/ubuntu_server/"},{"categories":["环境软件配置"],"content":"2. 具体步骤 ","date":"2022-04-05","objectID":"/ubuntu_server/:2:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server","uri":"/ubuntu_server/"},{"categories":["环境软件配置"],"content":"2.1 系统安装 准备工具 U盘一个 Ubuntu 20.04 LTS 镜像 启动盘制作工具Rufus 安装系统 参考链接如下 Ubuntu20.04安装详细图文教程（双系统） 【ubuntu20.04】10分钟win10安装ubuntu20.04双系统（无需Bios设置） Ubuntu 20.04 LTS 基础命令 软件安装 Shell编程 Ubuntu Server 20.04 LTS 安装教程 注意 服务器的网卡是千兆的，路由器百兆网卡的话，会出现网线口不亮的情况，换路由器上的千兆口就好了 相关链接 ","date":"2022-04-05","objectID":"/ubuntu_server/:2:1","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server","uri":"/ubuntu_server/"},{"categories":["环境软件配置"],"content":"2.2 配置SSH(远程连接-内网) 查看服务器的ssh服务是否开启sudo ps -e | grep ssh，如果系统默认没有安装开启，参考步骤：在Ubantu18.04上开启ssh服务，实现远程连接 下载安装Xshell（远程连接控制端）和Xftp（文件传输）软件，学生是教育邮箱免费使用 在服务器查看ip地址：先sudo apt install net-tools，然后使用ifconfig命令 端口号默认为22 使用Xshell新建会话连接，输入主机（ip地址）、端口号、用户名和密码；Xftp同理 ","date":"2022-04-05","objectID":"/ubuntu_server/:2:2","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server","uri":"/ubuntu_server/"},{"categories":["环境软件配置"],"content":"2.3 深度学习环境配置 软件源配置 输入以下命令备份原来的源 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 再输入以下命令打开sources.list配置文件更换源 阿里云镜像源 deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse 清华大学镜像源 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse 输入命令更新源 sudo apt-get update 输入命令更新一下软件即可 sudo apt-get upgrade miniconda安装 软件下载，在这里选择你需要的版本下载到指定路径（随意，一般是用户名文件下，或者是/usr/local下） 安装 Cuda安装 办法1：下载安装 办法2：自动安装 配置源，更新源，上面已经进行就不需要了 让Ubuntu自己安装显卡驱动（自动搭配安装cuda），以下两句命令都可以 ubuntu-drivers devices sudo ubuntu-drivers autoinstall 等待ubuntu自己安装驱动，而且会把cuda一并装好。装好之后重启电脑，再开机独立显卡就正常工作 nvidia-smi可以成功显示显卡状态，看到驱动版本和cuda版本则安装成功 这一步会默认安装最新的驱动，自然也是最新的cuda，比如cuda 11.4。你可能有顾虑：Pytorch只支持到cuda 11.1，paddle只支持到11.2，我用11.4能行吗？经过测试，cuda大版本号内向下兼容（至少11.4兼容11.2和11.1），可以正常使用 深度学习框架安装 这一步比较简单，网上有很多教程可以找到，网速慢的话，记得先更新conda源，然后再使用conda命令安装 conda install pytorch=1.9 torchvision torchaudio cudatoolkit=11.1 -c pytorch ","date":"2022-04-05","objectID":"/ubuntu_server/:2:3","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server","uri":"/ubuntu_server/"},{"categories":["环境软件配置"],"content":"参考链接 给小白的ubuntu深度学习服务器装机教程 Ubuntu 20.04 Cuda深度学习环境极！简！安装 【第一篇】Ubuntu 16.04 服务器深度学习环境共用方案（搭建、分配、克隆、远程） Ubuntu 20.04 LTS 基础命令 软件安装 Shell编程 ubuntu20.04如何更换国内源 在Ubantu18.04上开启ssh服务，实现远程连接 服务器和笔记本直连，网口灯不亮 手把手教你如何在Ubuntu下安装Miniconda 清华大学开源软件镜像站-ubuntu20.04下载 ","date":"2022-04-05","objectID":"/ubuntu_server/:3:0","tags":["深度学习 环境 ubuntu"],"title":"Ubuntu_server","uri":"/ubuntu_server/"},{"categories":["随笔"],"content":"元旦随笔 ","date":"2022-01-01","objectID":"/%E5%85%83%E6%97%A6%E9%9A%8F%E7%AC%94/:1:0","tags":["学习计划"],"title":"元旦随笔","uri":"/%E5%85%83%E6%97%A6%E9%9A%8F%E7%AC%94/"},{"categories":["随笔"],"content":"2021 2021年，是我硕士毕业的一年，也是我开始博士生生涯的一年。 这一年来，疫情依旧反反复复，告别了硕士好友，没有小伙伴一起去篮球场了，更多的时间是实验室-食堂-宿舍三点一线。博士的上半学期，课程，学业压力要比以往大很多，也结识了一些新朋友，实验室来了很多有趣的学弟学妹，但更多的时候还是自己一个人，开始慢慢习惯一个人的在校生活。 这一年来，我毕业了，入党了，硕士阶段的最后一篇工作接收了，参加的比赛获奖了，这是我之前的一些成就和收获。 这一年来，除了课程上的学习，在科研上，我好像并没有太大的进展，还是继续着之前的研究课题，看着一些一知半解的论文，刷着一些夯实基础的视频（li mu is all you need），三年毕业的压力很大，科研成果需要一朝一夕的不断积累，我深知自己还有许多需要学习的地方，但有时候确总是被惫懒钻了空子，不能保持持续的专注力。 这一年来，我有过许多矛盾的时刻，关于生活、关于学业、关于感情，但最终还是要做好当下的事情，尽管未来虚无缥缈，还是要睡个好觉。 ","date":"2022-01-01","objectID":"/%E5%85%83%E6%97%A6%E9%9A%8F%E7%AC%94/:2:0","tags":["学习计划"],"title":"元旦随笔","uri":"/%E5%85%83%E6%97%A6%E9%9A%8F%E7%AC%94/"},{"categories":["随笔"],"content":"2022 今天，是2022年的第一天，早上给老妈打了一个电话，给老师一个短讯问候，然后早起和朋友吃了一个早餐，来到了实验室帮学弟修改论文，因为疫情的原因，学校的考试提前，考试和大作业接踵而至，完成了这些，我要加快我的学习进度了，还有很多计划还没完成。 最后，寒假回家前定几个小目标吧 看完浙大概率论与数理统计 transfomer代码实现 精读3篇论文 看完沐神的序列模型部分 看一些mofanpython，学习一下flask、scrapy 计划明年的\"研智赛\"，目前是计算实现一个《面向农业领域的KBQA问答系统》 每周两道算法题 ","date":"2022-01-01","objectID":"/%E5%85%83%E6%97%A6%E9%9A%8F%E7%AC%94/:3:0","tags":["学习计划"],"title":"元旦随笔","uri":"/%E5%85%83%E6%97%A6%E9%9A%8F%E7%AC%94/"},{"categories":["自然语言处理"],"content":"Transfomer（Attention is all you need） 序列转入模型：给出一个序列，生成另外一个序列。（机器翻译）CNN、RNN、encoder and a decoder 亮点：仅仅依赖于注意力机制，没有RNN或者CNN RNN 缺点 运算中无法并行，计算$h_{t}$需要$h_{t-1}$的信息 序列太长，会丢失早期的时序信息 ","date":"2021-12-22","objectID":"/transfomer/:0:0","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"1. encoder-decoder encoder：将输入转变为机器能够理解的向量。$X=(x _1,…,x _n)$转变为$Z=(z _1,…,z _n)$ LayerNorm(x + Sublayer(x)) batchNorm：假设输入为二维矩阵（batch，feature），每次将每一列（特征）的数据变为均值为0、方差为1（向量减去其均值然后除以方差） LayerNorm：假设输入为二维矩阵（batch，feature），每次将每一行（样本）的数据变为均值为0、方差为1（向量减去其均值然后除以方差） Sublayer：Muti-head Attention - Feed Forward decoder：由$Z=(z _1,…,z _n)$得到$Y=(y _1,…,y _m)$ 区别：在decoder中，字是一个一个生成的，称为自回归（过去时刻的输出作为当前时刻的输入） ","date":"2021-12-22","objectID":"/transfomer/:1:0","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"2. encoder-decoder图示 文本向量化 将每个单词都嵌入到512维的向量中 编码器 编码器接受上面的向量列表作为输入，首先通过自注意力层，然后进行残差连接和LayerNorm，最后通过前馈神经网络层。编码器的输出作为下一个编码器的输入，嵌套n个编码器。 动图演示： 解码器 ","date":"2021-12-22","objectID":"/transfomer/:2:0","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"3. 技术细节描述 ","date":"2021-12-22","objectID":"/transfomer/:3:0","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"3.1 Self-attention计算流程 生成计算向量矩阵 根据每个字嵌入向量构建三个向量矩阵，分别为Q、K、V，嵌入字向量的维度为512维，因此Q，K，V的维度为（512/num_head） 计算自注意力分数（以单词“Thinking”为例） 自注意力分数决定了在某个位置对单词进行编码时，将多少注意力放在输入句子的其他部分上 计算Q和K的内积（内积的值越大，向量之间的相似度越高），q和每个k做内积 除以$\\sqrt{d _{k}}$ （向量的长度），用softmax函数得到每个k对应的权重（非负，加起来和为1），value乘以权重得到最后的输出 ","date":"2021-12-22","objectID":"/transfomer/:3:1","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"3.2 Self-attention矩阵运算 第一步，计算Q、K、V矩阵 第二步，批量计算自注意力值 ","date":"2021-12-22","objectID":"/transfomer/:3:2","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"3.3 Muti-head self attention 优点 拓展了模型专注于不同位置的能力 为注意力层提供了多个“表示子空间”，n个head则提供了n组Q、K、V查询矩阵，这些矩阵向量是随机初始化的，将输入嵌入投影到不同的表示子空间中 第一步，对每组不同的Q、K、V查询矩阵进行运算，得到对应的Q、K、V矩阵 第二步，使用n个不同的Q、K、V权重矩阵进行自注意力计算，得到n个不同的Z矩阵 但是前馈神经网络层并不需要八个矩阵，它只需要一个矩阵（每个单词一个向量），因此需要将这个八个矩阵压缩为一个矩阵 方法：使用一个额外的权重矩阵将他们相乘，得到最终的矩阵输出 总体流程 ","date":"2021-12-22","objectID":"/transfomer/:3:3","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"3.4 Position embedding 模型需要编码序列中单词的顺序，transfomer为每个输入嵌入增加了一个向量。这些向量遵循模型学习的特定模式，有助于确定每个单词的位置，或序列中不同单词之间的距离。 直观图 ","date":"2021-12-22","objectID":"/transfomer/:3:4","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"3.5 Residual connection 每个编码器中的每个子层周围都有一个残差连接，然后是层归一化步骤。 具体可视化如下： 全局可视化如下： ","date":"2021-12-22","objectID":"/transfomer/:3:5","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["自然语言处理"],"content":"3.6 Final Linear and Softmax Layer 将解码器输出的向量通过线性层映射到n_word维的向量空间，n_word为字典中词汇数量。 然后将这个n_word维的向量通过softmax层映射为每个词汇的概率，最后选择概率最高的关联词汇作为该时间步的输出。 ","date":"2021-12-22","objectID":"/transfomer/:3:6","tags":["transfomer"],"title":"Transfomer理解笔记","uri":"/transfomer/"},{"categories":["论文"],"content":"paper code ","date":"2021-11-18","objectID":"/paper_2/:0:0","tags":["实体关系抽取"],"title":"[21_paper_2] Synchronous Dual Network with Cross-Type Attention for Joint Entity and Relation Extraction","uri":"/paper_2/"},{"categories":["论文"],"content":"1. 主要贡献和结论 提出SDN，采用两个同构的双向注意力LSTM对实体类型增强表征和关系类型增强表征进行编码 通过SDN使用交叉注意力机制显示建模实体类型和关系类型之间的相互依赖的关系 多任务学习策略 ","date":"2021-11-18","objectID":"/paper_2/:1:0","tags":["实体关系抽取"],"title":"[21_paper_2] Synchronous Dual Network with Cross-Type Attention for Joint Entity and Relation Extraction","uri":"/paper_2/"},{"categories":["论文"],"content":"2. 问题 没有充分利用实体类型和关系类型之间的相互依赖性 ","date":"2021-11-18","objectID":"/paper_2/:2:0","tags":["实体关系抽取"],"title":"[21_paper_2] Synchronous Dual Network with Cross-Type Attention for Joint Entity and Relation Extraction","uri":"/paper_2/"},{"categories":["论文"],"content":"3. 具体内容 ","date":"2021-11-18","objectID":"/paper_2/:3:0","tags":["实体关系抽取"],"title":"[21_paper_2] Synchronous Dual Network with Cross-Type Attention for Joint Entity and Relation Extraction","uri":"/paper_2/"},{"categories":["论文"],"content":"3.1 model 模型分为三个架构 TA-LSTM Synchronous Dual Network with Cross-Type Attention 在TA-LSTM上构建同步的双网络 使用交叉注意力机制实现实体类型和关系类型之间的交互 实体类型学习主要是通过训练实体类型单元从一组标记的训练的数据中提取实体类型知识 3.1.1 公式解析 Type-Attention LSTM LSTM，输入：$w_{t}$， **输出**：${h}_{t}^{c}$ Type-Attention Mechanism，输入：$x_{t}, h_{t-1}$， **中间输出**：${K}^{(t)}=\\left[{k}_{1}^{(t)}, \\ldots, {k}_{m}^{(t)}\\right], {V}^{(t)}=\\left[{v}_{1}^{(t)}, \\ldots, {v}_{m}^{(t)}\\right]$ ​ 最后输出：$h_{t}$ Synchronous Dual Network with Cross-Type Attention Entity type learning–根据实体类型数量定义实体类型单元，将每个实体类型都看作一个标签，如PER、LOC等。实体类型学习主要是通过训练实体类型单元从一组标记的训练数据中提取实体类型知识 根据公式（1）和（2）可以得到上下文向量表示：${h}_{t}^{c}$，与实体类型相关的键值对表示：$\\bar{K}^{(t)}, \\bar{V}^{(t)}$，其中$p$表示实体类型单元的数量 根据公式4可以计算出实体表示向量：${H}^{(e)}$ entity type prediction 本质上就是一个序列标注的命名实体识别任务，但是不需要识别实体的边界，只需要识别出每个token所属的实体类型。 输入文本：${s}=\\left[w_{1}, \\ldots, w_{n}\\right]$ 输出三元组： Relation type learning 计算方法和实体相似，但是有2M+1个序列，M为关系数量。与实体类型预测不同的是，关系类型预测是多标签分类任务，因为一个实体可能会存在多个三元组中（三元组重叠）。 Cross-Type Attention Mechanism 关系 输入：实体表征向量：$\\mathbf{h}_{t}^{e}$，关系类型相关键值对： $\\hat{K}^{(t)}, \\hat{V}^{(t)}$ 输出：实体关系相关向量：$\\mathbf{c}_{t}^{e}$，根据公式（3）计算 实体 输入：关系表征向量：$\\mathbf{h}_{t}^{r}$，关系类型相关键值对：$\\bar{K}^{(t)}, \\bar{V}^{(t)}$ 输出：实体关系相关向量：$\\mathbf{c}_{t}^{r}$，根据公式（3）计算 综合，通过引入实体类型增强表示和关系类型增强表示，得到了新的实体类型增强表示和新的关系类型增强表示 Joint Entity and Relation Extraction 将实体类型增强表示和关系类型增强表示结合起来构成新的向量表示，用于NER和RE任务。 Named Entity Recognition BIESO，序列标注 Relation Extraction 多标签分类，$y_{i, j}^{r^{\\prime}}$表示单词对$\\left(w_{i}, w_{j}\\right)$属于关系$r^{\\prime} \\in \\mathcal{R}$的概率 损失函数 Training Inference 平均预测法，通过NER得到实体类别，给定头实体和尾实体： 计算他们属于第$r$种关系类型的概率。其中|$\\mathbf{e}{i}$|, |$\\mathbf{e}{j}$|表示实体的长度， ","date":"2021-11-18","objectID":"/paper_2/:3:1","tags":["实体关系抽取"],"title":"[21_paper_2] Synchronous Dual Network with Cross-Type Attention for Joint Entity and Relation Extraction","uri":"/paper_2/"},{"categories":["论文"],"content":"3.2 实验 3.2.1 数据集 3.2.2 结果 3.2.3 消融实验 3.2.4 识别示例 ","date":"2021-11-18","objectID":"/paper_2/:3:2","tags":["实体关系抽取"],"title":"[21_paper_2] Synchronous Dual Network with Cross-Type Attention for Joint Entity and Relation Extraction","uri":"/paper_2/"},{"categories":["论文"],"content":"参考 加油吧，骚年！ ","date":"2021-11-18","objectID":"/paper_2/:4:0","tags":["实体关系抽取"],"title":"[21_paper_2] Synchronous Dual Network with Cross-Type Attention for Joint Entity and Relation Extraction","uri":"/paper_2/"},{"categories":["论文"],"content":"paper code ","date":"2021-11-10","objectID":"/paper_1/:0:0","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"1. 主要贡献和结论 TPLinker将抽取标注框架统一为字符对链接问题，即Token Pair Linking problem 解决三元组重叠问题和暴露偏差（指在训练阶段是gold实体输入进行关系预测，而在推断阶段是上一步的预测实体输入进行关系判断；导致训练和推断存在不一致）问题 TPLinker是单阶段解码，训练和推断阶段抽取三元组不存在差异 ","date":"2021-11-10","objectID":"/paper_1/:1:0","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"2. 相关工作 实体关系的joint抽取模型可分为2大类 ","date":"2021-11-10","objectID":"/paper_1/:2:0","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"第1类：多任务学习（共享参数的联合抽取模型） 多任务学习机制中，实体和关系共享同一个网络编码，但本质上仍然是采取pipeline的解码方式（故仍然存在误差传播问题）。近年来的大部分joint都采取这种共享参数的模式，集中在魔改各种Tag框架和解码方式。 多头选择[1]：构建N×N×C 的关系分类器对每一个实体pair进行关系预测（N为序列长度，C为关系类别总数），输入的实体pair其实是每一个抽取实体的最后一个token。后续基于多头选择机制，也有paper引入预训练语言模型和bilinear分类。 层叠式指针标注[2]：将关系看作是SPO（Subject-Prediction-Object）抽取，先抽取主体Subject，然后对主体感知编码，最后通过层叠式的指针网络抽取关系及其对应的Object。 Span-level NER[3]：通过片段排列抽取实体，然后提取实体对进行关系分类。 ","date":"2021-11-10","objectID":"/paper_1/:2:1","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"第2类：结构化预测（联合解码的联合抽取模型） 结构化预测则是一个全局优化问题，在推断的时候能够联合解码实体和关系（而不是像多任务学习那样，先抽取实体、再进行关系分类），只需要在一个阶段解码，解决暴露偏差。结构化预测的joint模型也有较多，比如统一的序列标注框架[4]、多轮QA+强化学习[5]等，不过有的联合解码方式通常很复杂。 ","date":"2021-11-10","objectID":"/paper_1/:2:2","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"3. 具体内容 ","date":"2021-11-10","objectID":"/paper_1/:3:0","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"3.1 TPLinker的标注框架 TPLinker通过链接(linking)3种类型的Span矩阵来实现，为方便起见，论文作者将3种标注方式画到一个图里了，如上图所示（记关系类别总数为R个）： 紫色标注：EH to ET，表示实体的头尾关系，是1个N*N矩阵；如两个实体：New York City:M(New, City) =1; De Blasio:M(De, Blasio) =1。 红色标注：SH to OH，表示subject和object的头部token间的关系，是R个N*N矩阵；如三元组(New York City, mayor,De Blasio):M(New, De)=1。 蓝色标注：ST to OT，表示subject和object的尾部token间的关系，是R个N*N矩阵；如三元组(New York City, mayor,De Blasio):M(City, Blasio)=1。 因此，可以得到TPLinker共有2R+1个矩阵。值得注意的是：为防止稀疏计算，下三角矩阵不参与计算；虽然实体标注不会存在于下三角矩阵种，但关系标注是会存在的。为此，论文采取转换操作是：如果关系存在于下三角，则将其转置到上三角，并有“标记1”变为“标记2”。 ","date":"2021-11-10","objectID":"/paper_1/:3:1","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"3.1 TPLinker的解码过程 上图给出了一个完整的标注和编码示意图，标记有“0、1、2”三种。编码部分实际上是将原始的Span矩阵会展开为一个N*(N+1)/2序列进行编码(使用映射来记住原始矩阵中的位置)，也就是将token pair的每一个token编码拼接在一起。TPLinker的解码过程为： 解码EH-to-ET可以得到句子中所有的实体，用实体头token idx作为key，实体作为value，存入字典D中，记为D={entity token idx：entity}； 对每种关系r，解码ST-to-OT得到token对存入集合E中，解码SH-to-OH得到token对并在D中关联其token idx的实体value； 对上一步中得到的SH-to-OH token对的所有实体value对，在集合E中依次查询是否其尾token对在E中，进而可以得到三元组信息。 结合上图的具体case,我们具体描述一下解码过程： 解码EH-to-ET中得到3个实体：{New York,New York City,De Blasio}; 字典D为：{New:(New York,New York City),De:(De Blasio)} 以关系“mayor”为例 解码ST-to-OT得到集合E：{(City,Blasio)};解码SH-to-OH得到{(New,De)}，其在字典D中可关联的subject实体集合为{New York,New York City};object集合{De Blasio}; 遍历上述subject集合和object集合，并在集合E中查询尾token，发现只有一个实体三元组{New York City,mayor,De Blasio} 以关系“born in”为例, 解码ST-to-OT得到集合E：{(Blasio,York),(Blasio,City)};解码SH-to-OH得到{(De,New)}，其在字典D中可关联的subject实体集合为{De Blasio};object集合为{New York,New York City}; 遍历上述subject集合和object集合，并在集合E中查询尾token，可得到2个实体三元组：{De Blasio,born in,New York}和{De Blasio,born in,New York City} 由于关系live in与born in一样，所以我们最终可得到5个三元组： (New York City, mayor, De Blasio), (De Blasio, born in, New York), (De Blasio, born in, New York City), (De Blasio, live in, New York), (De Blasio, live in, New York City) ","date":"2021-11-10","objectID":"/paper_1/:3:2","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"3.2 实验结果 如上图所示，TPLinker也超越了之前的一众SOTA。此外，TPLinker相较于之前的SOTA——CasRel，推断速度也快3.6倍。 ","date":"2021-11-10","objectID":"/paper_1/:3:3","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"span-level NER 定义： span-level NER 是一种应对嵌套实体任务的方法，基于片段排列的方式，提取所有可能的片段排列，当某个片段排列是我们需要的正确排列作为正确实体，其他的作为负面实体，通过SoftMax对每一个Span进行实体类型判断，将原来的序列标注问题转化成分类问题。 基于片段排列的实体识别 思路： 整个算法为一个分类模型，对于含有n个token的文本，理论上存在n(n+1)/2种片段排列；如果文本过长，会产生大量的负样本，在实际中需要限制span长度并合理削减负样本。 优化： 使用分词代替按字分割句子（中文），从而减少样本数量，并且可以增加样本的对抗性和合理性 随机在负样本中选取一定量的样本 拓展正面实体的边界获取对抗性较高的负样本 限制实体的最大长度 ","date":"2021-11-10","objectID":"/paper_1/:4:0","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["论文"],"content":"参考 [1]Joint entity recognition and relation extraction as a multi-head selection problem [2]A Novel Cascade Binary Tagging Framework for Relational Triple Extraction [3]Span-based Joint Entity and Relation Extraction with Transformer Pre-training [4]Joint extraction of entities and relations based on a novel tagging scheme [5]Entity-Relation Extraction as Multi-Turn Question Answering 杰神知乎 加油吧，骚年！ ","date":"2021-11-10","objectID":"/paper_1/:5:0","tags":["实体关系抽取"],"title":"[21_paper_1] TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking","uri":"/paper_1/"},{"categories":["Web"],"content":"更新Github + Hugo博客 + 博客部署迁移 记录一下更新博客内容的步骤，以及相关git命令的含义。 ","date":"2021-10-25","objectID":"/second_post/:0:0","tags":["github hugo"],"title":"更新Github + Hugo博客 + 博客部署迁移","uri":"/second_post/"},{"categories":["Web"],"content":"步 ","date":"2021-10-25","objectID":"/second_post/:1:0","tags":["github hugo"],"title":"更新Github + Hugo博客 + 博客部署迁移","uri":"/second_post/"},{"categories":["Web"],"content":"1. 创建新博客文件 进入博客所在目录 cd G:\\MyBlog 创建一篇新的博客 hugo new posts/bolg_name.md 编写博客内容时，需要设置draft:false，否则博客的内容将会以草稿的形式保存，不会正式发布。 ","date":"2021-10-25","objectID":"/second_post/:1:1","tags":["github hugo"],"title":"更新Github + Hugo博客 + 博客部署迁移","uri":"/second_post/"},{"categories":["Web"],"content":"2.将博客内容上传至Github 编译 hugo 该命令用于编译网站的内容，同时生成public文件夹，里面保存了静态网页所需要的所有内容，我们需要把public上传至我们第一步创建的Github仓库中，通过github.io发布博客。 推送 进入目录 cd public 初始化 git init 删除本地指定的远程地址 git remote rm origin 填写自己的域名 git remote add origin git@github.com:gao929165733/gao929165733.github.io 添加当前目录下的所有文件到暂存区 git add . 初将暂存区内容添加到本地仓库中 git commit -m \"hugo\" 将本地的master分支推送到origin主机的master分支 git push -u origin master ","date":"2021-10-25","objectID":"/second_post/:1:2","tags":["github hugo"],"title":"更新Github + Hugo博客 + 博客部署迁移","uri":"/second_post/"},{"categories":["Web"],"content":"3. 将博客部署迁移到其他电脑 环境安装（Hugo+Git） 源代码复制和修改 将博客源代码文件复制到需要配置的电脑 删除主题的.git配置，如果你有多个主题文件夹的话，需要都删除。rm -rf ./themes/next/.git/ 用这条命令来删除你对应主题文件夹里的.git 文件夹，注意 .git 是一个隐藏文件夹。 .gitignore 文件夹在 Hexo 的根目录下可能已经存在了，可以打开和该文中的忽略事项比对一下，如果一样，接着 git init 初始化 git 仓库就好；如果没有该 .gitignore 文件夹就新建一个添加相应忽略事项再 git init 初始化。 git设置 重新在git设置一下身份的名字和邮箱（最好跟之前的电脑一致） git config --global user.name \"yourname\" git config --global user.email \"your@email.com\" 删除.ssh文件夹（直接搜索该文件夹）下所有文件(手动删除即可，不需要git）()，该文件在C盘用户目录下 git输入命令生成密匙（一直回车即可） ssh-keygen -t rsa -C \"your@email.com\"（请填你设置的邮箱地址） 打开https://github.com/，登陆你的账户，进入设置–\u003e“SSH and GPG keys”–\u003e“New SSH key”，将C盘用户目录下.ssh文件夹中的**“id_rsa.pub”**中内容复制到**“New SSH key”**中 开始写博客前，把远程私有仓库的最新博客源文件拉到本地 git pull git fetch --all #将远程git仓库上最新的内容拉取到本地,将本地库所关联的远程库更新至最新 重复第二步 ","date":"2021-10-25","objectID":"/second_post/:1:3","tags":["github hugo"],"title":"更新Github + Hugo博客 + 博客部署迁移","uri":"/second_post/"},{"categories":["Web"],"content":"4.一些坑和参考 git remote add origin https://github.com/xxx/xxx.github.io #填写自己的域名 该命令一直报错time out，替换为git remote add origin git@github.com:xxx/xxx.github.io即可 git remote rm origin # 删除本地指定的远程地址 loveIt主题 github+hugo配置教程 最安全的hexo多台电脑同步博客解决方案–非新建分支 git遇到的问题之“Please make sure you have the correct access rights and the repository exists.” 解决Please make sure you have the correct access rights and the repository exists 问题. 基于Hugo + Github Pages + Netlify搭建LoveIt主题个人博客 GitHub报错master-\u003emaster（fetch first)的解决方法 加油吧，骚年！ ","date":"2021-10-25","objectID":"/second_post/:1:4","tags":["github hugo"],"title":"更新Github + Hugo博客 + 博客部署迁移","uri":"/second_post/"},{"categories":["随笔"],"content":"第一篇博客 很久之前就想创建一个自己的博客，用来记录平时学习和生活的一些想法，起初是想用后端框架自己写一个，但是又觉得太麻烦。经过一番对比，发现hugo+guthib可以很快速简洁地实现一个博客的搭建，于是按照网上的傻瓜式教程一步步开始，终于在花费了半天的时间，完成了初步的博客框架搭建，后续在使用中再慢慢完善和熟悉吧。第一篇博客就随便写写记录一下，Let’s go! ","date":"2021-07-12","objectID":"/first_post/:1:0","tags":["休闲"],"title":"Hello，Hugo 个人博客","uri":"/first_post/"},{"categories":["随笔"],"content":"假期安排 暑假完要开始博士生涯了，任重而道远鸭，做了如下计划： 华为多轮对话比赛 机器学习视频看完（机器学习基石） 博士方向论文整合（看论文，写综述） 计算机基础能力巩固（专业课+概率论） 每天坚持锻炼1个小时 加油吧，骚年！ ","date":"2021-07-12","objectID":"/first_post/:2:0","tags":["休闲"],"title":"Hello，Hugo 个人博客","uri":"/first_post/"}]